// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: database.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	RetrieveTask(ctx context.Context, in *TaskRequestById, opts ...grpc.CallOption) (*TaskResponseById, error)
	RetrieveByCompletion(ctx context.Context, in *TaskRequestByCompletion, opts ...grpc.CallOption) (*TaskResponseByCompletion, error)
	RetrieveAllTasks(ctx context.Context, in *TaskRequestAll, opts ...grpc.CallOption) (*TaskResponseAll, error)
	PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (*PutTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/pb.Database/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RetrieveTask(ctx context.Context, in *TaskRequestById, opts ...grpc.CallOption) (*TaskResponseById, error) {
	out := new(TaskResponseById)
	err := c.cc.Invoke(ctx, "/pb.Database/RetrieveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RetrieveByCompletion(ctx context.Context, in *TaskRequestByCompletion, opts ...grpc.CallOption) (*TaskResponseByCompletion, error) {
	out := new(TaskResponseByCompletion)
	err := c.cc.Invoke(ctx, "/pb.Database/RetrieveByCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RetrieveAllTasks(ctx context.Context, in *TaskRequestAll, opts ...grpc.CallOption) (*TaskResponseAll, error) {
	out := new(TaskResponseAll)
	err := c.cc.Invoke(ctx, "/pb.Database/RetrieveAllTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (*PutTaskResponse, error) {
	out := new(PutTaskResponse)
	err := c.cc.Invoke(ctx, "/pb.Database/PutTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/pb.Database/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	RetrieveTask(context.Context, *TaskRequestById) (*TaskResponseById, error)
	RetrieveByCompletion(context.Context, *TaskRequestByCompletion) (*TaskResponseByCompletion, error)
	RetrieveAllTasks(context.Context, *TaskRequestAll) (*TaskResponseAll, error)
	PutTask(context.Context, *PutTaskRequest) (*PutTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (UnimplementedDatabaseServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedDatabaseServer) RetrieveTask(context.Context, *TaskRequestById) (*TaskResponseById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTask not implemented")
}
func (UnimplementedDatabaseServer) RetrieveByCompletion(context.Context, *TaskRequestByCompletion) (*TaskResponseByCompletion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveByCompletion not implemented")
}
func (UnimplementedDatabaseServer) RetrieveAllTasks(context.Context, *TaskRequestAll) (*TaskResponseAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAllTasks not implemented")
}
func (UnimplementedDatabaseServer) PutTask(context.Context, *PutTaskRequest) (*PutTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (UnimplementedDatabaseServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Database/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RetrieveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RetrieveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Database/RetrieveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RetrieveTask(ctx, req.(*TaskRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RetrieveByCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequestByCompletion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RetrieveByCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Database/RetrieveByCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RetrieveByCompletion(ctx, req.(*TaskRequestByCompletion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RetrieveAllTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequestAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RetrieveAllTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Database/RetrieveAllTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RetrieveAllTasks(ctx, req.(*TaskRequestAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Database/PutTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).PutTask(ctx, req.(*PutTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Database/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Database_CreateTask_Handler,
		},
		{
			MethodName: "RetrieveTask",
			Handler:    _Database_RetrieveTask_Handler,
		},
		{
			MethodName: "RetrieveByCompletion",
			Handler:    _Database_RetrieveByCompletion_Handler,
		},
		{
			MethodName: "RetrieveAllTasks",
			Handler:    _Database_RetrieveAllTasks_Handler,
		},
		{
			MethodName: "PutTask",
			Handler:    _Database_PutTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Database_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database.proto",
}
